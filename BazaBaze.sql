CREATE TABLE  "NARUDZBENICA" 
   (	"NARUDZBENICAID" NUMBER(7,0), 
	"DATUM" DATE,
    "ROKISPORUKE" DATE, 
    "VAZENJE" DATE,
    "DOSTAVA" VARCHAR2(40),
	 PRIMARY KEY ("NARUDZBENICAID") ENABLE
   );

CREATE TABLE  "KATALOG" 
   (	"KATALOGID" NUMBER(7,0), 
	"DATUM" DATE,
    "NARUDZBENICAID" NUMBER(7,0),
	 PRIMARY KEY ("KATALOGID") ENABLE,
     FOREIGN KEY ("NARUDZBENICAID")
     REFERENCES  "NARUDZBENICA" ("NARUDZBENICAID") ENABLE
   );
   
CREATE TABLE  "POREZ" 
   (	"POREZID" NUMBER(7,0), 
	"IZNOSPOREZA" NUMBER(10,3),
	 PRIMARY KEY ("POREZID") ENABLE
   );
   
CREATE TABLE  "MODELPROIZVODA" 
   (	"MODELID" NUMBER(7,0), 
	"MEMORIJA" VARCHAR2(5),
    "BOJA" VARCHAR2(20),
    "OPIS" VARCHAR2(50),
    "NAZIVMODELAPROIZVODA" VARCHAR2(20),
	 PRIMARY KEY ("MODELID") ENABLE
   );   

CREATE TABLE  "PROMENAPOREZA" 
   (	"POREZID" NUMBER(7,0), 
	"IZNOSPROMENE" NUMBER(10,3),
    "DATUMPROMENE" DATE,
    "MODELID" NUMBER(7,0),
	 PRIMARY KEY ("IZNOSPROMENE") ENABLE, 
     FOREIGN KEY ("POREZID")
     REFERENCES  "POREZ" ("POREZID") ENABLE,
     FOREIGN KEY ("MODELID")
     REFERENCES  "MODELPROIZVODA" ("MODELID") ENABLE   
   );


CREATE TABLE  "PROIZVOD" 
   (	"PROIZVODID" NUMBER(7,0), 
	"OPIS" VARCHAR2(50),
    "NAZIV" VARCHAR2(20),
    "MODELID" NUMBER(7,0),
	 PRIMARY KEY ("PROIZVODID") ENABLE,
     FOREIGN KEY ("MODELID")
     REFERENCES  "MODELPROIZVODA" ("MODELID") ENABLE   
   );   
   
CREATE TABLE  "STAVKE_KATALOGA" 
   (	"STAVKEKATALOGAID" NUMBER(7,0), 
	"OPIS" VARCHAR2(20), 
	"KOLICINA" NUMBER(10,0), 
    "KATALOGID" NUMBER(7,0), 
    "PROIZVODID" NUMBER(7,0), 
	 PRIMARY KEY ("STAVKEKATALOGAID", "KATALOGID") ENABLE,
     FOREIGN KEY ("PROIZVODID")
	  REFERENCES  "PROIZVOD" ("PROIZVODID") ENABLE
   );

CREATE TABLE  "PROIZVOD" 
   (	"PROIZVODID" NUMBER(7,0), 
	"OPIS" VARCHAR2(50),
    "NAZIV" VARCHAR2(20),
    "MODELID" NUMBER(7,0),
	 PRIMARY KEY ("KATALOGID") ENABLE,
     FOREIGN KEY ("MODELID")
     REFERENCES  "MODELPROIZVODA" ("MODELID") ENABLE   
   );   
   
CREATE TABLE  "CENA" 
   (	"PROIZVODID" NUMBER(7,0), 
	"CENAID" NUMBER(7,0),
    "DATUM" DATE,
    "IZNOS" NUMBER(7,3),
	 PRIMARY KEY ("CENAID","PROIZVODID" ) ENABLE
   );
   CREATE TABLE  "DRZAVA" 
   (	"DRZAVAID" NUMBER(7,0), 
	"NAZIVDRZAVE" VARCHAR2(20),
	 PRIMARY KEY ("DRZAVAID") ENABLE
   );
   
    CREATE TABLE  "MESTO" 
   (	"MESTOID" NUMBER(7,0), 
	"NAZIVMESTA" VARCHAR2(20),
    "DRZAVAID" NUMBER(7,0), 
	 PRIMARY KEY ("MESTOID") ENABLE,
     FOREIGN KEY ("DRZAVAID")
    REFERENCES  "DRZAVA" ("DRZAVAID") ENABLE
   );
   
   
CREATE TABLE  "NARUCILAC" 
   (	"PIB" NUMBER(7,0), 
	"NAZIVNARUCIOCA" VARCHAR2(20), 
	"EMAIL" VARCHAR2(20), 
    "DRZAVAID" NUMBER(7,0), 
    "MESTOID" NUMBER(7,0),
	 PRIMARY KEY ("PIB") ENABLE, 
	 FOREIGN KEY ("DRZAVAID")
     REFERENCES  "DRZAVA" ("DRZAVAID") ENABLE,
     FOREIGN KEY ("MESTOID")
     REFERENCES  "MESTO" ("MESTOID") ENABLE   
   );   
   
   
   CREATE TABLE  "PREVOZNIK" 
   (	"PIB" NUMBER(7,0), 
	"NAZIVPREVOZNIKA" VARCHAR2(20),
    "DRZAVAID" NUMBER(7,0), 
    "MESTOID" NUMBER(7,0),
	 PRIMARY KEY ("PIB") ENABLE, 
	 FOREIGN KEY ("DRZAVAID")
     REFERENCES  "DRZAVA" ("DRZAVAID") ENABLE,
     FOREIGN KEY ("MESTOID")
     REFERENCES  "MESTO" ("MESTOID") ENABLE   
   ); 
   
   CREATE TABLE  "ZAPOSLENI" 
   (	"ZAPOSLENIID" NUMBER(7,0), 
   "NAZIVZAP" VARCHAR(30), 
	 PRIMARY KEY ("ZAPOSLENIID") ENABLE

   );

CREATE TABLE  "TIP_RACUNA" 
   (	"TIPRACUNAID" NUMBER(7,0), 
	"NAZIVTIPARAC" VARCHAR2(50), 
	 PRIMARY KEY ("TIPRACUNAID") ENABLE, 
	 CONSTRAINT "TS" CHECK ( NAZIVTIPARAC IN ('tekuci', 'devizni')) ENABLE
   );
   

CREATE TABLE  "RACUN" 
   (	"RACUNID" NUMBER(7,0), 
	"TIPRACUNAID" NUMBER(7,0), 
    "BROJ_RACUNA" NUMBER(7,0), 
	 PRIMARY KEY ("RACUNID") ENABLE, 
	 FOREIGN KEY ("TIPRACUNAID")
	  REFERENCES  "TIP_RACUNA" ("TIPRACUNAID") ENABLE
   );
   CREATE TABLE "BANKA" (
   "BANKAID" NUMBER(7,0),
   "NAZIVBANKE" VARCHAR2(40),
   "MESTOID" NUMBER(7,0),
   "DRZAVAID" NUMBER(7,0),
   	 PRIMARY KEY ("BANKAID") ENABLE, 
	 FOREIGN KEY ("DRZAVAID")
     REFERENCES  "DRZAVA" ("DRZAVAID") ENABLE,
     FOREIGN KEY ("MESTOID")
     REFERENCES  "MESTO" ("MESTOID") ENABLE 
   );
CREATE TABLE  "IZVOD_RACUNA" 
   (	"IZVODID" NUMBER(7,0), 
		"PROMET" NUMBER(9,3), 
    "PRETHODNOSTANJE" NUMBER(9,3), 
    		"RACUNID" NUMBER(7,0), 
    "BROJNALOGAODOBRENJA" NUMBER(7,0), 
    "NOVOSTANJE" NUMBER(9,3),  
    "NAZIVIMAOCA" VARCHAR2(30), 
    "MATICNIBR" VARCHAR2(13), 
	 PRIMARY KEY ("IZVODID") ENABLE, 
	 FOREIGN KEY ("RACUNID")
	  REFERENCES  "RACUN" ("RACUNID") ENABLE
   );
   
CREATE TABLE  "OTPREMNICA" 
   (	"OTPREMNICAID" NUMBER(7,0), 
	    "ROKISPORUKE" DATE,
    	"DATUMISPORUKE" DATE, 
        "ZAPOSLENIID" NUMBER(7,0),
        "PIBPREVOZNIKA" NUMBER(7,0),
        "PIBNARUCIOCA" NUMBER(7,0),
	 PRIMARY KEY ("OTPREMNICAID") ENABLE, 
	 FOREIGN KEY ("ZAPOSLENIID")
	  REFERENCES  "ZAPOSLENI" ("ZAPOSLENIID") ENABLE,
      FOREIGN KEY ("PIBNARUCIOCA")
	  REFERENCES  "NARUCILAC" ("PIB") ENABLE,
      FOREIGN KEY ("PIBPREVOZNIKA")
	  REFERENCES  "PREVOZNIK" ("PIB") ENABLE
   );
   
   CREATE TABLE "STAVKA_OTPREMNICE"   
   (	"STAVKAOTPRID" NUMBER(7,0), 
	"OTPREMNICAID" NUMBER(10,0), 
    "KOLICINA" NUMBER(7,0), 
    "PROIZVODID" NUMBER(7,0), 
	 PRIMARY KEY ("STAVKAOTPRID", "OTPREMNICAID") ENABLE,
     FOREIGN KEY ("PROIZVODID")
	  REFERENCES  "PROIZVOD" ("PROIZVODID") ENABLE
   );

   CREATE TABLE "STAVKA_IZVODA_RACUNA"   
   (	"SIFRASTAVKEIZVODA" NUMBER(7,0), 
   "MODEL" VARCHAR2(30),
	"IZNOSZADUZENJA" NUMBER(10,3), 
    "REFERENTNAOZNAKA" NUMBER(7,0), 
    "IZVODID" NUMBER(7,0),
    "SIFRADOZNAKE" NUMBER(7,0),
    "OTPREMNICAID" NUMBER(7,0), 
	 PRIMARY KEY ("SIFRASTAVKEIZVODA", "IZVODID") ENABLE,
     FOREIGN KEY ("OTPREMNICAID")
	  REFERENCES  "OTPREMNICA" ("OTPREMNICAID") ENABLE
   );
   
   CREATE TABLE  "PROFAKTURA" 
   (	"PROFAKTURAID" NUMBER(7,0), 
	    "DATUMPREDAJE" DATE,
        "ZAPOSLENIID" NUMBER(7,0),
        "PIBPREVOZNIKA" NUMBER(7,0),
        "PIBNARUCIOCA" NUMBER(7,0),
         "RACUNID" NUMBER(7,0),
	 PRIMARY KEY ("PROFAKTURAID") ENABLE, 
	 FOREIGN KEY ("ZAPOSLENIID")
	  REFERENCES  "ZAPOSLENI" ("ZAPOSLENIID") ENABLE,
      FOREIGN KEY ("PIBNARUCIOCA")
	  REFERENCES  "NARUCILAC" ("PIB") ENABLE,
      FOREIGN KEY ("PIBPREVOZNIKA")
	  REFERENCES  "PREVOZNIK" ("PIB") ENABLE,
      FOREIGN KEY ("RACUNID")
	  REFERENCES  "RACUN" ("RACUNID") ENABLE
   );
   
   CREATE TABLE "STAVKA_PROFAKTURE"   
   (	"STAVKAPROFAKTUREID" NUMBER(7,0), 
	"PROFAKTURAID" NUMBER(10,0), 
    "KOLICINA" NUMBER(7,0), 
    "PROIZVODID" NUMBER(7,0), 
	 PRIMARY KEY ("STAVKAPROFAKTUREID", "PROFAKTURAID") ENABLE,
     FOREIGN KEY ("PROIZVODID")
	  REFERENCES  "PROIZVOD" ("PROIZVODID") ENABLE
   );
   
CREATE OR REPLACE TYPE nazivTipaRacunaTip AS OBJECT (
oznakaTipaRacuna varchar2(10)
)
FINAL;

CREATE TABLE tip_racuna_tip(
TIPRACUNAID number,
NAZIVTIPARACUNA nazivTipaRacunaTip, 
constraint pk_tipracunaid primary key (TIPRACUNAID)
);

INSERT INTO tip_racuna_tip VALUES (1,nazivTipaRacunaTip('TEKUCI'));
INSERT INTO tip_racuna_tip VALUES (2,nazivTipaRacunaTip('ŠTEDNI'));

SELECT tr.TIPRACUNAID, tr.NAZIVTIPARACUNA.oznakaTipaRacuna
FROM tip_racuna_tip tr;


CREATE OR REPLACE TYPE ZaposleniTip AS OBJECT (
NAZIVZAPOSLENOG varchar2(50),
NAZIVRADNOGMESTA varchar2(10),

MEMBER FUNCTION getNazivZaposlenog return varchar2,
MEMBER FUNCTION getNazivRadnogMesta RETURN varchar2

)
INSTANTIABLE NOT FINAL;


CREATE OR REPLACE TYPE BODY ZaposleniTip AS      
MEMBER FUNCTION getNazivZaposlenog RETURN varchar2 IS      
BEGIN 
		RETURN SELF.NAZIVZAPOSLENOG;      
	END; 
MEMBER FUNCTION getNazivRadnogMesta RETURN varchar2 IS      
BEGIN 
		RETURN SELF.NAZIVRADNOGMESTA;      
	END; 
END;


create table ZAPOSLENI_TIP(
ZAPOSLENIID number,
PODACIOZAPOSLENOM ZaposleniTip,
constraint pk_ZAPOSLENITIP primary key (ZAPOSLENIID)
);

INSERT INTO ZAPOSLENI_TIP VALUES (1, ZaposleniTip(‘Marija Djurovic’, ‘Direktor’ ));
INSERT INTO ZAPOSLENI_TIP VALUES (2, ZaposleniTip(‘Svetlana Medar,'Zamenik direktora'));

SELECT zap.ZAPOSLENIID,zap.PODACIOZAPOSLENOM.getNazivZaposlenog(), zap. PODACIOZAPOSLENOM.getNazivRadnogMesta()
FROM ZAPOSLENI_TIP zap; 

--trigeri 2nf
CREATE OR REPLACE PACKAGE paket AS
pomocna number:=0; 
END paket;


create or replace TRIGGER ZABRANAIZMENE_OPISAREKLAMACIJE
AFTER UPDATE OF OPISREKLAMACIJE
ON STAVKA_REKLAMACIJE
BEGIN
RAISE_APPLICATION_ERROR(-20000, 'Nije dozvoljena direktna izmena opisa reklamacije u okviru tabele STAVKA_REKLAMACIJE.'); 
END;

create or replace TRIGGER STAVKAREKLAMACIJE_IZMENA
BEFORE INSERT
ON STAVKA_REKLAMACIJE
FOR EACH ROW
DECLARE
v_OPISREKLAMACIJE varchar2(100);
BEGIN
SELECT OPISREKLAMACIJE INTO v_opisreklamacije
FROM REKLAMACIJA
WHERE REKLAMACIJAID = :NEW.REKLAMACIJAID;
:NEW.OPISREKLAMACIJE := v_OPISREKLAMACIJE;
END;

create or replace TRIGGER PROMENIOPIS_REKLAMACIJA
AFTER UPDATE OF OPISREKLAMACIJE
ON REKLAMACIJA
FOR EACH ROW
BEGIN
IF paket.pomocna=0 THEN
paket.pomocna:=1;
UPDATE STAVKA_REKLAMACIJE
SET OPISREKLAMACIJE = :NEW.OPISREKLAMACIJE
WHERE REKLAMACIJAID = :OLD.REKLAMACIJAID;
paket.pomocna:=0;
END IF;
END;


--TRIGERI 2NF

--BANKA MESTO

create or replace TRIGGER ZABRANA_IZMENENAZIVAMESTA
AFTER UPDATE OF NAZIVMESTA
ON BANKA
BEGIN
RAISE_APPLICATION_ERROR(-20000, 'Nije dozvoljena direktna izmena naziva mesta u okviru tabele BANKA.');
END;

CREATE OR REPLACE TRIGGER PROMENI_NAZIVMESTA
AFTER UPDATE OF NAZIVMESTA
ON MESTO
FOR EACH ROW
BEGIN
IF paket.pomocna=0 THEN
paket.pomocna:=1;
UPDATE BANKA
SET NAZIVMESTA = :NEW.NAZIVMESTA
WHERE MESTOID= :OLD.MESTOID;
paket.pomocna:=0;
END IF;
END;

CREATE OR REPLACE TRIGGER UNOS_BANKA
BEFORE INSERT
ON BANKA
FOR EACH ROW
DECLARE
v_NAZIVMESTA varchar2(30);
BEGIN
SELECT NAZIVMESTA INTO v_NAZIVMESTA
FROM MESTO
WHERE MESTOID = :NEW.MESTOID;
:NEW.NAZIVMESTA := v_NAZIVMESTA;
END;

CREATE OR REPLACE TRIGGER PROMENA_MESTOID
BEFORE UPDATE OF MESTOID
ON BANKA
FOR EACH ROW
DECLARE
v_NAZIVMESTA varchar2(30);
BEGIN
SELECT NAZIVMESTA INTO v_NAZIVMESTA
FROM MESTO
WHERE MESTOID = :NEW.MESTOID;
:NEW.NAZIVMESTA:= v_NAZIVMESTA;    
END;

--BANKA DRZAVA
CREATE OR REPLACE TRIGGER ZABRANA_IZMENE_NAZIVDRZAVE_BANKA
AFTER UPDATE OF NAZIVDRZAVE
ON BANKA
BEGIN
RAISE_APPLICATION_ERROR(-20000, 'NIJE DOZVOLJENA DIREKTNA IZMENA NAZIVA DRZAVE U OKVIRU TABELE BANKA.');
END;


CREATE OR REPLACE TRIGGER PROMENA_DRZAVAID_MESTO
AFTER UPDATE OF DRZAVAID
ON MESTO
FOR EACH ROW
DECLARE
V_NAZIVDRZAVE VARCHAR2(40);
BEGIN
SELECT NAZIVDRZAVE INTO V_NAZIVDRZAVE
FROM DRZAVA
WHERE DRZAVAID = :NEW.DRZAVAID;
END;
/
BEGIN
IF paket.pomocna=0 THEN
paket.pomocna:=1;
UPDATE BANKA
SET NAZIVDRZAVE = V_NAZIVDRZAVE
WHERE MESTOID = :NEW.MESTOID;
paket.pomocna:=0;
END IF;
END;


CREATE OR REPLACE TRIGGER PROMENA_NAZIVMESTA_MESTO
AFTER UPDATE OF NAZIVMESTA
ON MESTO
FOR EACH ROW
DECLARE
BEGIN
IF paket.pomocna=0 THEN
paket.pomocna:=1;
UPDATE BANKA
SET NAZIVMESTA = :NEW.NAZIVMESTA
WHERE MESTOID = :OLD.MESTOID;
paket.pomocna:=0;
END IF;
END;



CREATE OR REPLACE TRIGGER PROMENA_NAZIVDRZAVA_DRZAVA
AFTER UPDATE OF NAZIVDRZAVE
ON DRZAVA
FOR EACH ROW
BEGIN
IF paket.pomocna=0 THEN
paket.pomocna:=1;
UPDATE BANKA
SET NAZIVDRZAVE=:NEW.NAZIVDRZAVE
WHERE MESTOID IN (SELECT MESTOID
                      FROM MESTO
                      WHERE DRZAVAID=:OLD.DRZAVAID);
paket.pomocna:=0;
END IF;
END;


CREATE OR REPLACE TRIGGER INSERT_BANKA
BEFORE INSERT
ON BANKA
FOR EACH ROW
DECLARE
V_NAZIVDRZAVE VARCHAR2(40);
V_NAZIVMESTA VARCHAR2(40);
BEGIN
SELECT MESTO.NAZIVMESTA INTO V_NAZIVMESTA
FROM MESTO
WHERE MESTO.mestoid = :NEW.MESTOID;
SELECT DRZAVA.NAZIVDRZAVE INTO V_NAZIVDRZAVE
FROM DRZAVA JOIN MESTO ON drzava.drzavaid=mesto.drzavaid
WHERE mesto.mestoid = :NEW.MESTOID;
:NEW.NAZIVMESTA:= V_NAZIVMESTA;
:NEW.NAZIVDRZAVE:= V_NAZIVDRZAVE;
END;



CREATE OR REPLACE TRIGGER PROMENA_MESTOID_BANKA
AFTER UPDATE OF MESTOID
ON BANKA
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
V_NAZIVDRZAVE VARCHAR2(40);
V_NAZIVMESTA VARCHAR2(40);
BEGIN
SELECT MESTO.nazivmesta INTO V_NAZIVMESTA
FROM MESTO
WHERE MESTO.mestoid = :NEW.MESTOID;
SELECT drzava.nazivdrzave INTO V_NAZIVDRZAVE
FROM DRZAVA JOIN MESTO ON DRZAVA.DRZAVAID=MESTO.DRZAVAID
WHERE mesto.mestoid = :NEW.MESTOID;
END;
/
BEGIN
IF paket.pomocna=0 THEN
paket.pomocna:=1;
UPDATE banka
SET BANKA.NAZIVMESTA = V_NAZIVMESTA, banka.nazivdrzave = V_NAZIVDRZAVE
WHERE MESTO.MESTOID = :NEW.MESTOID;
paket.pomocna:=0;
END IF;
END;

CREATE TABLE  "REKLAMACIJAOSNOVNO" 
   (	"REKLAMACIJAID" NUMBER(7,0), 
        "DATUMPOSTAVLJANJA" DATE,
        "OPISREKLAMACIJE" VARCHAR2(50),
	 PRIMARY KEY ("REKLAMACIJAID") ENABLE
   );
   
   CREATE TABLE  "REKLAMACIJADETALJNO" 
   (	"REKLAMACIJAID" NUMBER(7,0), 
	    "DATUMKUPOVINE" DATE,
        "DATUMODOBRAVANJA" DATE,
        "ZAPOSLENIID" NUMBER(7,0),
        "IZJAVA" VARCHAR2(15),
        "PIBNARUCIOCA" NUMBER(7,0),
         "RACUNID" NUMBER(7,0),
         "PROFAKTURAID" NUMBER(7,0),
	 PRIMARY KEY ("REKLAMACIJAID") ENABLE, 
	 FOREIGN KEY ("ZAPOSLENIID")
	  REFERENCES  "ZAPOSLENI" ("ZAPOSLENIID") ENABLE,
      FOREIGN KEY ("PIBNARUCIOCA")
	  REFERENCES  "NARUCILAC" ("PIB") ENABLE,
      FOREIGN KEY ("PROFAKTURAID")
	  REFERENCES  "PROFAKTURA" ("PROFAKTURAID") ENABLE
   );

--vertikalno particionisanje
--kreiranje pogleda
CREATE OR REPLACE VIEW REKLAMACIJA_VIEW
AS
SELECT O.ReklamacijaID, O.DatumPostavljanja, O.OpisReklamacije, D.DatumKupovine, D.DatumOdobravanja,
D.ZaposleniID, D.Izjava, D.PIBNarucioca, D.RacunID, D.ProfakturaID
FROM ReklamacijaOsnovno O, ReklamacijaDetaljno D
WHERE O.ReklamacijaID = D.ReklamacijaID;

CREATE OR REPLACE TRIGGER ReklamacijaPogledUnos
INSTEAD OF INSERT ON reklamacija_view
REFERENCING NEW AS novi
FOR EACH ROW
BEGIN
INSERT INTO ReklamacijaOsnovno (ReklamacijaID, DatumPostavljanja, OpisReklamacije) 
VALUES (:novi.ReklamacijaID, :novi.DatumPostavljanja, :novi.OpisReklamacije);
INSERT INTO ReklamacijaDetaljno (ReklamacijaID, DatumKupovine, DatumOdobravanja, ZaposleniID, Izjava,PIBNarucioca, RacunID, ProfakturaID ) 
VALUES (:novi.ReklamacijaID, :novi.DatumKupovine,:novi.DatumOdobravanja, :novi.ZaposleniID, :novi.Izjava,:novi.PIBNarucioca, :novi.RacunID, :novi.ProfakturaID);
END;

CREATE OR REPLACE TRIGGER ReklamacijaPogledIzmena
INSTEAD OF UPDATE ON reklamacija_view
REFERENCING NEW AS novi
FOR EACH ROW
BEGIN
UPDATE ReklamacijaOsnovno SET ReklamacijaID =:novi.ReklamacijaID, DatumPostavljanja =:novi.DatumPostavljanja, OpisReklamacije = :novi.OpisReklamacije WHERE ReklamacijaID = :novi.ReklamacijaID;
UPDATE ReklamacijaDetaljno SET ReklamacijaID =:novi.ReklamacijaID, DatumKupovine = :novi.DatumKupovine, DatumOdobravanja =:novi.DatumOdobravanja,
ZaposleniID=:novi.ZaposleniID,Izjava= :novi.Izjava,PIBNarucioca=:novi.PIBNarucioca,RacunID= :novi.RacunID, ProfakturaID=:novi.ProfakturaID
WHERE ReklamacijaID = :novi.ReklamacijaID;
END;


CREATE OR REPLACE TRIGGER ReklamacijaPogledBrisanje
INSTEAD OF DELETE ON reklamacija_view
REFERENCING OLD AS stari
FOR EACH ROW
BEGIN
DELETE FROM ReklamacijaOsnovno WHERE ReklamacijaID=:stari.ReklamacijaID;
DELETE FROM ReklamacijaDetaljno WHERE ReklamacijaID =:stari.ReklamacijaID;
END;
--horizontalno
CREATE TABLE  "REKLAMACIJA_PARTICIJE" 
   (	"REKLAMACIJAID" NUMBER(7,0), 
        "DATUMPOSTAVLJANJA" DATE,
        "OPISREKLAMACIJE" VARCHAR2(15),
        "DATUMODOBRAVANJA" DATE,
        "DATUMKUPOVINE" DATE,
        "ZAPOSLENIID" NUMBER(7,0),
        "IZJAVA" VARCHAR2(15),
        "PIBNARUCIOCA" NUMBER(7,0),
         "RACUNID" NUMBER(7,0),
         "PROFAKTURAID" NUMBER(7,0),
	 PRIMARY KEY ("REKLAMACIJAID") ENABLE, 
	 FOREIGN KEY ("ZAPOSLENIID")
	  REFERENCES  "ZAPOSLENI" ("ZAPOSLENIID") ENABLE,
      FOREIGN KEY ("PIBNARUCIOCA")
	  REFERENCES  "NARUCILAC" ("PIB") ENABLE,
      FOREIGN KEY ("PROFAKTURAID")
	  REFERENCES  "PROFAKTURA" ("PROFAKTURAID") ENABLE
   )
PARTITION BY RANGE(DATUMPOSTAVLJANJA)
(
PARTITION reklamacije_2019_q1 VALUES LESS THAN (TO_DATE('01-MAR-2019','dd-MON-yyyy')),
PARTITION reklamacije_2019_q2 VALUES LESS THAN (TO_DATE('01-JUN-2019','dd-MON-yyyy')),
PARTITION reklamacije_2019_q3 VALUES LESS THAN (TO_DATE('01-SEP-2019','dd-MON-yyyy')),
PARTITION reklamacije_2019_q4 VALUES LESS THAN (TO_DATE('01-JAN-2020','dd-MON-yyyy'))
)




--ALTER TABLE Racun ADD CONSTRAINT checkOgrRacun CHECK (TipRacuna IN ('Tekuci', 'Stedni')); 



CREATE INDEX Proizvod ON Proizvod(Naziv);
SELECT * FROM Proizvod WHERE Naziv = 'Macbook';


CREATE INDEX Proizvod_ModelID_Index ON Proizvod(ModelID);
SELECT * FROM PROIZVOD WHERE MODELID = 2;


--AKTUELNA CENA
CREATE OR REPLACE PACKAGE paket2 AS
pomocna number:=0; 
PROCEDURE postaviBroj(brojUnet number);
FUNCTION vratiBroj RETURN number;
END paket2;



CREATE OR REPLACE TRIGGER ZABRANA_AKTUELNACENA
BEFORE UPDATE OF AKTUELNACENA
ON PROIZVOD
FOR EACH ROW
BEGIN
IF paket2.pomocna = 0 THEN
RAISE_APPLICATION_ERROR(-20000, 'NIJE DOZVOLJENA DIREKTNA IZMENA AKTUELNE CENE U OKVIRU TABELE PROIZVOD...');
END IF;
END;

CREATE OR REPLACE PACKAGE BODY paket2 IS
broj number;
PROCEDURE postaviBroj(brojUnet number) IS
BEGIN
	Broj := brojUnet;
END;
FUNCTION vratiBroj RETURN number IS
BEGIN
	RETURN broj;
END;
END;


CREATE OR REPLACE TRIGGER AKTUELNACENA_TRIGER
BEFORE INSERT OR UPDATE OR DELETE ON CENA
FOR EACH ROW
BEGIN
IF (INSERTING) THEN
        BEGIN
        paket2.postaviBroj( :NEW.PROIZVODID);
        END;
ELSE
      BEGIN
      paket2.postaviBroj(:OLD.PROIZVODID);
      END;
END IF;
END;




CREATE OR REPLACE PROCEDURE AKTUELNACENA (BROJ IN NUMBER) AS
AKTCENA PROIZVOD.AKTUELNACENA%TYPE;
BEGIN
AKTCENA:=0;
SELECT IZNOS
INTO AKTCENA
FROM CENA
WHERE PROIZVODID=BROJ AND DATUM=(SELECT MAX(DATUM)
FROM CENA
WHERE PROIZVODID=BROJ AND DATUM<=SYSDATE);
UPDATE PROIZVOD
SET AKTUELNACENA=AKTCENA
WHERE PROIZVODID=BROJ;
END;

CREATE OR REPLACE TRIGGER AKTUELNACENA_PROC
AFTER INSERT OR UPDATE OR DELETE ON CENA
DECLARE
     BROJ NUMBER:= paket2.vratiBroj();
BEGIN
    paket2.pomocna := 1;
    AKTUELNACENA(BROJ);
    paket2.pomocna := 0;
END;


---UKUPNO PROFAKTURA OPTIMIZACIJA

CREATE OR REPLACE PACKAGE paket3 AS
pomocna number:=0; 
broj number;
END paket3;


CREATE OR REPLACE TRIGGER ZABRANA_IZMENE_UKUPNO
BEFORE UPDATE OF UKUPNO
ON PROFAKTURA
FOR EACH ROW
BEGIN
IF paket3.pomocna = 0 THEN
RAISE_APPLICATION_ERROR(-20000, 'NIJE DOZVOLJENA DIREKTNA IZMENA KOLONE UKUPNA VREDNOST U OKVIRU TABELE KARTICA ARTIKLA ZA SKLADIŠTE.');
END IF;
END;


CREATE OR REPLACE TRIGGER SACUVAJ_BROJ
BEFORE INSERT OR DELETE OR UPDATE ON STAVKA_PROFAKTURE
FOR EACH ROW
BEGIN
IF(INSERTING) THEN
	BEGIN paket3.broj := :NEW.PROFAKTURAID;
END;
ELSE
	BEGIN paket3.broj := :OLD.PROFAKTURAID;
END;
END IF;
END;


CREATE OR REPLACE TRIGGER  UKUPNO_PROFAKTURA
AFTER INSERT OR UPDATE OR DELETE ON STAVKA_PROFAKTURE
DECLARE
PROFAKTURAID number := paket3.broj;
BEGIN   
	paket3.pomocna := 1;
	izracunajUkupnuVrednostStavki(PROFAKTURAID);
	paket3.pomocna := 0;
END;


CREATE OR REPLACE PROCEDURE  izracunajUkupnuVrednostStavki (PRFID IN number) AS  
ukupnoVR number:= 0;
BEGIN  
	SELECT SUM(KOLICINA) INTO ukupnoVR  
	FROM STAVKA_PROFAKTURE
WHERE PROFAKTURAID = PRFID;
	UPDATE PROFAKTURA
	SET UKUPNO = ukupnoVR 
	WHERE PROFAKTURAID = PRFID;
END;




